basePath: /
definitions:
  daos.LoginInputDAO:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@ssw0rd
        type: string
    required:
    - email
    - password
    type: object
  daos.SignUpInputDAO:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        maxLength: 32
        minLength: 3
        type: string
      password:
        example: P@ssw0rd
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  daos.TokenDAO:
    properties:
      token:
        type: string
    type: object
  daos.UserOutputDAO:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  daos.UserUpdateDAO:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - name
    type: object
  rest_errors.ResponseError:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    email: amir.kurmanbekov@gmail.com
  description: test-task1 make simple CRUD operations with users
  title: test-task1
  version: "1.2"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT token
      parameters:
      - description: User login input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/daos.LoginInputDAO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/daos.TokenDAO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      summary: User login
      tags:
      - auth
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/daos.UserOutputDAO'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with name, email, and password
      parameters:
      - description: User sign up input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/daos.SignUpInputDAO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/daos.UserOutputDAO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      summary: Register new user
      tags:
      - auth
  /users/{id}:
    delete:
      description: Deletes a user from the system by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieves a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/daos.UserOutputDAO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates user fields like name or email by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/daos.UserUpdateDAO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/daos.UserUpdateDAO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
